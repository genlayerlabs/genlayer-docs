#!/bin/bash
set -euo pipefail

# Pull Request utilities
# Handles PR creation with proper templates and metadata

# Create documentation PR
create_documentation_pr() {
    local version="$1"
    local config_json="$2"
    local sync_reports="$3"
    local total_changes="$4"
    local total_added="$5"
    local total_updated="$6"
    local total_deleted="$7"
    
    echo "📋 Creating documentation PR..."
    
    # Check if PR already exists for this branch
    if pr_json=$(gh pr view "$BRANCH_NAME" --json url,state 2>/dev/null); then
        local pr_state
        pr_state=$(echo "$pr_json" | jq -r .state)
        local pr_url
        pr_url=$(echo "$pr_json" | jq -r .url)
        
        if [[ "$pr_state" == "OPEN" ]]; then
            echo "📄 Open PR already exists for branch $BRANCH_NAME"
            echo "🔗 View existing PR: $pr_url"
            return 0
        else
            echo "📄 Closed PR exists for branch $BRANCH_NAME (state: $pr_state)"
            echo "🔄 Creating new PR..."
        fi
    else
        echo "📄 No PR exists for branch $BRANCH_NAME"
        echo "🆕 Creating new PR..."
    fi
    
    # Extract PR configuration from config
    local pr_title_template
    pr_title_template=$(echo "$config_json" | jq -r '.pr.title_template')
    
    local pr_labels
    pr_labels=$(echo "$config_json" | jq -r '.pr.labels | join(",")')
    
    local base_branch
    base_branch=$(echo "$config_json" | jq -r '.pr.base_branch')
    
    # Generate PR title
    local pr_title
    pr_title=$(echo "$pr_title_template" | sed "s/{version}/$version/g")
    
    # Create PR body
    local pr_body_file="${RUNNER_TEMP}/pr_body.md"
    create_pr_body "$version" "$sync_reports" "$total_changes" "$total_added" "$total_updated" "$total_deleted" > "$pr_body_file"
    
    # Create PR using GitHub CLI
    local pr_url
    pr_url=$(gh pr create \
        --title "$pr_title" \
        --body-file "$pr_body_file" \
        --label "$pr_labels" \
        --base "$base_branch" \
        --head "$BRANCH_NAME")
    
    echo "✅ PR created successfully: $pr_url"
    echo "pr_url=$pr_url" >> "$GITHUB_OUTPUT"
}

# Create PR body content
create_pr_body() {
    local version="$1"
    local sync_reports="$2"
    local total_changes="$3"
    local total_added="$4"
    local total_updated="$5"
    local total_deleted="$6"
    
    cat <<EOF
## 🔄 Documentation Sync from Node Repository

This PR automatically syncs documentation from the genlayer-node repository.

### 📋 Summary
- **Source Repository**: \`genlayerlabs/genlayer-node\`
- **Version**: \`$version\`
- **Total Files Changed**: $total_changes
  - Added: $total_added files
  - Updated: $total_updated files
  - Deleted: $total_deleted files
- **Timestamp**: $(date -u +"%Y-%m-%dT%H:%M:%SZ")

### 📝 Changes

See details below:

---

$sync_reports

---

### 🤖 Automated Process

This PR was automatically generated by the documentation sync workflow. The following scripts were run:
- \`npm run node-generate-changelog\`
- \`npm run node-update-setup-guide\`
- \`npm run node-update-config\`
- \`npm run node-generate-api-docs\`

Please review the changes and merge if everything looks correct.

### ✅ Checklist

- [ ] Documentation changes have been reviewed
- [ ] All automated scripts completed successfully
- [ ] No sensitive information is exposed in config files
- [ ] API documentation is properly formatted

EOF
}