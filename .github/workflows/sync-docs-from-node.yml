name: Sync Documentation from Node Repository

on:
  repository_dispatch:
    types: [sync-docs]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version/tag to sync from genlayer-node repo (e.g., v0.3.5, or "latest" to detect)'
        required: false
        default: 'latest'
      changelog_path:
        description: 'Path to changelog files in source repo'
        required: false
        default: 'docs/changelog'
      api_gen_path:
        description: 'Path to API gen files in source repo'
        required: false
        default: 'docs/api/rpc'
      api_debug_path:
        description: 'Path to API debug files in source repo'
        required: false
        default: 'docs/api/rpc'
      api_gen_regex:
        description: 'Regex pattern to filter API gen files (e.g., "gen_.*")'
        required: false
        default: 'gen_(?!dbg_).*'
      api_debug_regex:
        description: 'Regex pattern to filter API debug files (e.g., "gen_dbg_.*")'
        required: false
        default: 'gen_dbg_.*'
      api_ops_path:
        description: 'Path to API ops files in source repo'
        required: false
        default: 'docs/api/ops'

# Prevent concurrent runs of the same workflow
concurrency:
  group: sync-docs-${{ github.ref }}-${{ github.event.inputs.version || github.event.client_payload.version || 'latest' }}
  cancel-in-progress: true

jobs:
  prepare:
    name: 'Prepare Sync Parameters'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_version.outputs.version }}
      should_continue: ${{ steps.validate.outputs.should_continue }}
    steps:
      - name: Checkout documentation repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install pyyaml

      - name: Extract sync parameters
        id: params
        run: |
          set -euo pipefail
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            # Default to "latest" if version not provided
            VERSION="${{ github.event.client_payload.version }}"
            if [ -z "$VERSION" ]; then
              VERSION="latest"
            fi
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          fi

      - name: Clone source repository for version detection
        uses: actions/checkout@v4
        with:
          repository: genlayerlabs/genlayer-node
          token: ${{ secrets.NODE_REPO_TOKEN || secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          sparse-checkout: |
            docs
            configs/node/config.yaml.example
          sparse-checkout-cone-mode: true
          path: source-repo

      - name: Detect latest version (if needed)
        id: detect_version
        if: steps.params.outputs.version == 'latest' || steps.params.outputs.version == ''
        run: |
          cd source-repo
          # Get the latest tag that's not a pre-release
          LATEST_TAG=$(git tag -l | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)
          
          if [[ -z "$LATEST_TAG" ]]; then
            echo "No tags found in repository"
            exit 1
          fi
          
          echo "Detected latest tag: $LATEST_TAG"
          echo "version=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Set final version
        id: set_version
        run: |
          if [[ "${{ steps.params.outputs.version }}" == "latest" || -z "${{ steps.params.outputs.version }}" ]]; then
            VERSION="${{ steps.detect_version.outputs.version }}"
          else
            VERSION="${{ steps.params.outputs.version }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"

      - name: Checkout version in source repo
        run: |
          cd source-repo
          git checkout ${{ steps.set_version.outputs.version }}

      - name: Validate inputs and setup
        id: validate
        run: |
          echo "should_continue=true" >> "$GITHUB_OUTPUT"
          echo "✅ Preparation complete - ready to sync version: ${{ steps.detect_version.outputs.final_version }}"

  sync-files:
    name: 'Sync Files'
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.should_continue == 'true'
    strategy:
      matrix:
        sync_type: [changelog, config, api_gen, api_debug, api_ops]
      fail-fast: false
    steps:
      - name: Checkout documentation repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js and dependencies
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm install
          python3 -m pip install --upgrade pip pyyaml

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Clone source repository
        uses: actions/checkout@v4
        with:
          repository: genlayerlabs/genlayer-node
          token: ${{ secrets.NODE_REPO_TOKEN || secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          sparse-checkout: |
            docs
            configs/node/config.yaml.example
          sparse-checkout-cone-mode: true
          path: source-repo
          ref: ${{ needs.prepare.outputs.version }}

      - name: Sync files using composite action
        id: sync
        uses: ./.github/actions/sync-files
        with:
          sync_type: ${{ matrix.sync_type }}
          version: ${{ needs.prepare.outputs.version }}
          changelog_path: ${{ github.event.inputs.changelog_path || github.event.client_payload.changelog_path || 'docs/changelog' }}
          api_gen_path: ${{ github.event.inputs.api_gen_path || github.event.client_payload.api_gen_path || 'docs/api/rpc' }}
          api_debug_path: ${{ github.event.inputs.api_debug_path || github.event.client_payload.api_debug_path || 'docs/api/rpc' }}
          api_ops_path: ${{ github.event.inputs.api_ops_path || github.event.client_payload.api_ops_path || 'docs/api/ops' }}
          api_gen_regex: ${{ github.event.inputs.api_gen_regex || github.event.client_payload.api_gen_regex || 'gen_(?!dbg_).*' }}
          api_debug_regex: ${{ github.event.inputs.api_debug_regex || github.event.client_payload.api_debug_regex || 'gen_dbg_.*' }}

      - name: Upload sync reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sync-reports-${{ matrix.sync_type }}
          path: artifacts/
          retention-days: 1

      - name: Upload synced files
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: synced-files-${{ matrix.sync_type }}
          path: |
            content/validators/
            pages/api-references/
          retention-days: 1

  aggregate-results:
    name: 'Aggregate Sync Results'
    runs-on: ubuntu-latest
    needs: [prepare, sync-files]
    if: always() && needs.prepare.outputs.should_continue == 'true'
    outputs:
      total_changes: ${{ steps.calculate.outputs.total_changes }}
      total_added: ${{ steps.calculate.outputs.total_added }}
      total_updated: ${{ steps.calculate.outputs.total_updated }}
      total_deleted: ${{ steps.calculate.outputs.total_deleted }}
      sync_reports: ${{ steps.collect.outputs.all_reports }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download all sync reports
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          pattern: sync-reports-*
          merge-multiple: true
          path: sync-reports/

      - name: Calculate totals and collect reports
        id: calculate
        run: .github/scripts/aggregate-reports.sh

      - name: Store aggregated results
        id: collect
        run: |
          echo "✅ Results aggregated successfully"

  generate-docs:
    name: 'Generate Documentation'
    runs-on: ubuntu-latest
    needs: [prepare, aggregate-results]
    if: always() && needs.prepare.outputs.should_continue == 'true' && needs.aggregate-results.result != 'cancelled'
    outputs:
      generation_success: ${{ steps.generate.outputs.success }}
    steps:
      - name: Checkout documentation repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm install

      - name: Download synced files
        uses: actions/download-artifact@v4
        with:
          pattern: synced-files-*
          merge-multiple: true
          path: ./

      - name: Debug downloaded files
        run: |
          echo "::group::DEBUG: Files present before generation scripts"
          echo "DEBUG: Content/validators directory:"
          ls -la content/validators/ || echo "DEBUG: Directory not found"
          echo ""
          echo "DEBUG: Pages/api-references directory:"
          find pages/api-references/ -name "*.mdx" | head -20 || echo "DEBUG: No mdx files found"
          echo ""
          echo "DEBUG: Changelog files:"
          ls -la content/validators/changelog/ || echo "DEBUG: Changelog directory not found"
          echo "::endgroup::"
        
      - name: Run documentation generation scripts
        id: generate
        run: |
          set -euo pipefail
          echo "🔄 Running documentation generation scripts"
          
          echo "::group::Running node-generate-changelog"
          npm run node-generate-changelog || { echo "❌ node-generate-changelog failed"; exit 1; }
          echo "✅ Generated changelog"
          echo "::endgroup::"
          
          echo "::group::Running node-update-setup-guide"
          npm run node-update-setup-guide || { echo "❌ node-update-setup-guide failed"; exit 1; }
          echo "✅ Updated setup guide versions"
          echo "::endgroup::"
          
          echo "::group::Running node-update-config"
          npm run node-update-config || { echo "❌ node-update-config failed"; exit 1; }
          echo "✅ Updated config in setup guide"
          echo "::endgroup::"
          
          echo "::group::Running node-generate-api-docs"
          npm run node-generate-api-docs || { echo "❌ node-generate-api-docs failed"; exit 1; }
          echo "✅ Generated API documentation"
          echo "::endgroup::"
          
          echo "success=true" >> "$GITHUB_OUTPUT"

      - name: Debug files after generation
        run: |
          echo "::group::DEBUG: Files after generation scripts"
          echo "DEBUG: Git status after scripts:"
          git status --porcelain || echo "DEBUG: No git status"
          echo ""
          echo "DEBUG: Modified files:"
          git diff --name-only || echo "DEBUG: No modified files"
          echo ""
          echo "DEBUG: Check specific files that should be updated:"
          echo "DEBUG: changelog.md:"
          ls -la pages/validators/changelog.md || echo "DEBUG: changelog.md not found"
          echo "DEBUG: _meta.json files:"
          find pages/api-references/ -name "_meta.json" | while read file; do
            echo "DEBUG: File: $file"
            echo "DEBUG: Last modified: $(stat -c %y "$file" 2>/dev/null || stat -f %m "$file" 2>/dev/null || echo "unknown")"
          done
          echo "::endgroup::"

      - name: Final verification
        id: verify
        run: |
          # Final config verification
          echo "::group::Final config.yaml verification"
          CONFIG_PATH="content/validators/config.yaml"
          if [ -f "$CONFIG_PATH" ]; then
            echo "✅ Config file exists: $CONFIG_PATH"
            head -10 "$CONFIG_PATH" || true
          else
            echo "⚠️ Config file not found: $CONFIG_PATH"
          fi
          echo "::endgroup::"

      - name: Upload processed files
        uses: actions/upload-artifact@v4
        if: steps.generate.outputs.success == 'true'
        with:
          name: processed-files
          path: |
            content/validators/
            pages/api-references/
            pages/validators/
          retention-days: 1

  create-pr:
    name: 'Create Pull Request'
    runs-on: ubuntu-latest
    needs: [prepare, aggregate-results, generate-docs]
    if: always() && needs.prepare.outputs.should_continue == 'true' && (needs.aggregate-results.result == 'success' || needs.generate-docs.result == 'success')
    outputs:
      pr_url: ${{ steps.create_pr.outputs.pr_url }}
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout documentation repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Download processed files
        uses: actions/download-artifact@v4
        with:
          name: processed-files
          path: ./

      - name: Get aggregated results
        id: get_results
        run: |
          # Use pre-calculated totals from aggregate-results job
          TOTAL_CHANGES="${{ needs.aggregate-results.outputs.total_changes }}"
          TOTAL_ADDED="${{ needs.aggregate-results.outputs.total_added }}"
          TOTAL_UPDATED="${{ needs.aggregate-results.outputs.total_updated }}"
          TOTAL_DELETED="${{ needs.aggregate-results.outputs.total_deleted }}"
          
          echo "total_changes=$TOTAL_CHANGES" >> "$GITHUB_OUTPUT"
          echo "total_added=$TOTAL_ADDED" >> "$GITHUB_OUTPUT"
          echo "total_updated=$TOTAL_UPDATED" >> "$GITHUB_OUTPUT"
          echo "total_deleted=$TOTAL_DELETED" >> "$GITHUB_OUTPUT"
          
          echo "📊 Total changes detected: $TOTAL_CHANGES"
      
      - name: Check for changes and create branch
        id: check_changes
        run: |
          source .github/scripts/git-utils.sh
          
          if check_for_changes; then
            BRANCH_NAME=$(create_sync_branch "${{ needs.prepare.outputs.version }}")
            
            # Use aggregated metrics from previous step
            commit_and_push_changes \
              "${{ needs.prepare.outputs.version }}" \
              "${{ steps.get_results.outputs.total_changes }}" \
              "${{ steps.get_results.outputs.total_added }}" \
              "${{ steps.get_results.outputs.total_updated }}" \
              "${{ steps.get_results.outputs.total_deleted }}" \
              "$BRANCH_NAME"
          else
            echo "No changes to commit"
            exit 0
          fi
      
#      - name: Print diff of changes for PR
#        if: steps.check_changes.outputs.has_changes == 'true'
#        run: |
#          echo "::group::📋 Diff of changes that will be included in the PR"
#          echo "Showing diff between main and current sync branch:"
#          echo ""
#
#          # Show a concise summary first
#          echo "📊 Files changed:"
#          git diff --name-status main HEAD || git diff --name-status origin/main HEAD || echo "Could not determine diff with main branch"
#          echo ""
#
#          # Show the actual diff with some formatting
#          echo "📝 Detailed changes:"
#          git diff main HEAD || git diff origin/main HEAD || echo "Could not show detailed diff with main branch"
#          echo "::endgroup::"
      
      - name: Create Pull Request
        id: create_pr
        if: steps.check_changes.outputs.has_changes == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the branch name from git
          BRANCH_NAME=$(git branch --show-current)
          
          # Check if PR already exists for this branch
          if PR_JSON=$(gh pr view "$BRANCH_NAME" --json url,state 2>/dev/null); then
            PR_STATE=$(echo "$PR_JSON" | jq -r .state)
            PR_URL=$(echo "$PR_JSON" | jq -r .url)
            
            if [ "$PR_STATE" = "OPEN" ]; then
              echo "Open PR already exists for branch $BRANCH_NAME – updating PR description"
              echo "Existing PR: $PR_URL"
              UPDATE_EXISTING_PR=true
            else
              echo "Closed PR exists for branch $BRANCH_NAME (state: $PR_STATE)"
              echo "Creating new PR..."
              UPDATE_EXISTING_PR=false
            fi
          else
            echo "No PR exists for branch $BRANCH_NAME"
            UPDATE_EXISTING_PR=false
          fi
          
          # Create PR body file
          PR_BODY_FILE="${{ runner.temp }}/pr_body.md"
          cat >"$PR_BODY_FILE" <<EOF
          ## 🔄 Documentation Sync from Node Repository

          This PR automatically syncs documentation from the genlayer-node repository.

          ### 📋 Summary
          - **Source Repository**: \`genlayerlabs/genlayer-node\`
          - **Version**: \`${{ needs.prepare.outputs.version }}\`
          - **API Gen Filter**: \`${{ github.event.inputs.api_gen_regex || github.event.client_payload.api_gen_regex || 'gen_(?!dbg_).*' }}\`
          - **API Debug Filter**: \`${{ github.event.inputs.api_debug_regex || github.event.client_payload.api_debug_regex || 'gen_dbg_.*' }}\`
          - **Total Files Changed**: ${{ steps.get_results.outputs.total_changes }}
            - Added: ${{ steps.get_results.outputs.total_added }} files
            - Updated: ${{ steps.get_results.outputs.total_updated }} files
            - Deleted: ${{ steps.get_results.outputs.total_deleted }} files
          - **Timestamp**: $(date -u +"%Y-%m-%dT%H:%M:%SZ")

          ### 🤖 Automated Process

          This PR was automatically generated by the documentation sync workflow. The following scripts were run:
          - \`npm run node-generate-changelog\`
          - \`npm run node-update-setup-guide\`
          - \`npm run node-update-config\`
          - \`npm run node-generate-api-docs\`

          Please review the changes and merge if everything looks correct.

          ### ✅ Checklist

          - [x] All automated scripts completed successfully
          - [x] No sensitive information is exposed in config files
          - [x] API documentation is properly formatted
          EOF
          
          # Create or update PR using GitHub CLI
          if [ "$UPDATE_EXISTING_PR" = "true" ]; then
            # Update existing PR
            gh pr edit "$BRANCH_NAME" \
              --title "docs: sync documentation from genlayer-node ${{ needs.prepare.outputs.version }}" \
              --body-file "$PR_BODY_FILE"
            
            echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
            echo "✅ PR updated: $PR_URL"
          else
            # Create new PR and capture URL
            PR_URL=$(gh pr create \
              --title "docs: sync documentation from genlayer-node ${{ needs.prepare.outputs.version }}" \
              --body-file "$PR_BODY_FILE" \
              --label "documentation" \
              --label "node" \
              --base "main" \
              --head "$BRANCH_NAME")
            
            echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
            echo "✅ PR created: $PR_URL"
          fi

  summary:
    name: 'Workflow Summary'
    runs-on: ubuntu-latest
    needs: [prepare, aggregate-results, generate-docs, create-pr]
    if: always()
    steps:
      - name: Download sync reports
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          pattern: sync-reports-*
          merge-multiple: true
          path: sync-reports/

      - name: Generate workflow summary
        run: |
          echo "# Documentation Sync Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.prepare.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add detailed sync information
          echo "## Sync Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Process each sync report
          for sync_type in changelog config api_gen api_debug api_ops; do
            report_file="sync-reports/sync_report_${sync_type}.md"
            if [[ -f "$report_file" ]]; then
              echo "### $(cat "$report_file" | head -1 | sed 's/^## //')" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              
              # Extract the main content (skip header and empty lines) - avoid subshell
              while IFS= read -r line; do
                if [[ "$line" =~ ^-\ (Added|Updated|Deleted|No.*found): ]]; then
                  echo "$line" >> $GITHUB_STEP_SUMMARY
                elif [[ "$line" =~ ^Summary: ]]; then
                  echo "**$line**" >> $GITHUB_STEP_SUMMARY
                elif [[ -n "$line" && ! "$line" =~ ^$ ]]; then
                  # Handle other non-empty lines that might be relevant
                  echo "$line" >> $GITHUB_STEP_SUMMARY
                fi
              done < <(sed -n '3,$p' "$report_file")
              echo "" >> $GITHUB_STEP_SUMMARY
            else
              # Get proper title for sync type
              case "$sync_type" in
                "changelog") sync_title="Changelog" ;;
                "config") sync_title="Config File" ;;
                "api_gen") sync_title="API Gen Methods" ;;
                "api_debug") sync_title="API Debug Methods" ;;
                "api_ops") sync_title="API Ops Methods" ;;
                *) sync_title="$(echo "$sync_type" | tr '[:lower:]' '[:upper:]')" ;;
              esac
              echo "### ${sync_title} Sync" >> $GITHUB_STEP_SUMMARY
              echo "- No report available" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          # Add overall result
          echo "## Overall Result" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.create-pr.outputs.pr_url }}" != "" ]]; then
            echo "**PR Created:** ${{ needs.create-pr.outputs.pr_url }}" >> $GITHUB_STEP_SUMMARY
          else
            total_changes="${{ needs.aggregate-results.outputs.total_changes }}"
            if [[ "$total_changes" == "0" ]]; then
              echo "**Result:** No changes detected - no PR created" >> $GITHUB_STEP_SUMMARY
            else
              echo "**Result:** $total_changes changes detected but no PR created" >> $GITHUB_STEP_SUMMARY
            fi
          fi