name: Sync Documentation from Node Repository

on:
  repository_dispatch:
    types: [sync-docs]
  workflow_dispatch:
    inputs:
      source_branch:
        description: 'Branch to sync from genlayer-node repo'
        required: false
        default: 'main'
      tag:
        description: 'Tag/version for branch naming (e.g., v0.3.5)'
        required: true

jobs:
  sync-and-create-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout documentation repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Set up Git
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Extract sync parameters
        id: params
        run: |
          set -euo pipefail
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "source_branch=${{ github.event.client_payload.source_branch || 'main' }}" >> $GITHUB_OUTPUT
            echo "tag=${{ github.event.client_payload.tag }}" >> $GITHUB_OUTPUT
            echo "changelog_path=${{ github.event.client_payload.changelog_path || 'docs/changelog' }}" >> $GITHUB_OUTPUT
            echo "api_gen_path=${{ github.event.client_payload.api_gen_path || 'docs/api/rpc/gen' }}" >> $GITHUB_OUTPUT
            echo "api_debug_path=${{ github.event.client_payload.api_debug_path || 'docs/api/rpc/debug' }}" >> $GITHUB_OUTPUT
          else
            echo "source_branch=${{ github.event.inputs.source_branch }}" >> $GITHUB_OUTPUT
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
            echo "changelog_path=docs/changelog" >> $GITHUB_OUTPUT
            echo "api_gen_path=docs/api/gen" >> $GITHUB_OUTPUT
            echo "api_debug_path=docs/api/debug" >> $GITHUB_OUTPUT
          fi

      - name: Clone genlayer-node repository (docs folder only)
        uses: actions/checkout@v4
        with:
          repository: genlayerlabs/genlayer-node
          ref: ${{ steps.params.outputs.source_branch }}
          token: ${{ secrets.NODE_REPO_TOKEN || secrets.GITHUB_TOKEN }}
          sparse-checkout: |
            docs
          sparse-checkout-cone-mode: true
          path: source-repo

      - name: Create branch for changes
        run: |
          set -euo pipefail
          BRANCH_NAME="docs/node/${{ steps.params.outputs.tag }}"
          git switch --force-create "$BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Sync changelog files
        id: sync_changelog
        run: |
          set -euo pipefail
          SYNC_REPORT="${{ runner.temp }}/sync_report.md"
          SOURCE_CHANGELOG="source-repo/${{ steps.params.outputs.changelog_path }}"
          DEST_CHANGELOG="content/validators/changelog"

          echo "## Changelog Sync" >> $SYNC_REPORT
          echo "" >> $SYNC_REPORT

          if [ -d "$SOURCE_CHANGELOG" ]; then
            mkdir -p "$DEST_CHANGELOG"

            # Track existing files before sync
            declare -A EXISTING_FILES
            while IFS= read -r file; do
              [ -n "$file" ] && EXISTING_FILES["$(basename "$file")"]="$file"
            done < <(find "$DEST_CHANGELOG" -name "*.mdx" -type f)

            # Track what we'll be syncing
            ADDED=0
            UPDATED=0

            # Process all source files
            for file in "$SOURCE_CHANGELOG"/*.mdx "$SOURCE_CHANGELOG"/*.md; do
              if [ -f "$file" ]; then
                basename_no_ext=$(basename "$file" | sed 's/\.[^.]*$//')
                dest_filename="${basename_no_ext}.mdx"
                dest_path="$DEST_CHANGELOG/$dest_filename"

                if [ -f "$dest_path" ]; then
                  # File exists - check if it's different
                  if ! cmp -s "$file" "$dest_path"; then
                    cp "$file" "$dest_path"
                    echo "- Updated: \`$dest_filename\`" >> $SYNC_REPORT
                    UPDATED=$((UPDATED + 1))
                  fi
                  # Remove from tracking to identify deletions later
                  unset EXISTING_FILES["$dest_filename"]
                else
                  # New file
                  cp "$file" "$dest_path"
                  echo "- Added: \`$dest_filename\`" >> $SYNC_REPORT
                  ADDED=$((ADDED + 1))
                fi
              fi
            done

            # Remove files that no longer exist in source
            DELETED=0
            for dest_file in "${EXISTING_FILES[@]}"; do
              if [ -f "$dest_file" ]; then
                rm "$dest_file"
                echo "- Deleted: \`$(basename "$dest_file")\`" >> $SYNC_REPORT
                DELETED=$((DELETED + 1))
              fi
            done

            # Summary
            TOTAL=$((ADDED + UPDATED + DELETED))
            if [ $TOTAL -eq 0 ]; then
              echo "- No changelog updates found" >> $SYNC_REPORT
            else
              echo "" >> $SYNC_REPORT
              echo "Summary: $ADDED added, $UPDATED updated, $DELETED deleted" >> $SYNC_REPORT
            fi

            # Output all metrics
            echo "changelog_added=$ADDED" >> $GITHUB_OUTPUT
            echo "changelog_updated=$UPDATED" >> $GITHUB_OUTPUT
            echo "changelog_deleted=$DELETED" >> $GITHUB_OUTPUT
            echo "changelog_total=$TOTAL" >> $GITHUB_OUTPUT
          else
            echo "- Source changelog directory not found: \`${{ steps.params.outputs.changelog_path }}\`" >> $SYNC_REPORT
            echo "changelog_added=0" >> $GITHUB_OUTPUT
            echo "changelog_updated=0" >> $GITHUB_OUTPUT
            echo "changelog_deleted=0" >> $GITHUB_OUTPUT
            echo "changelog_total=0" >> $GITHUB_OUTPUT
          fi

      - name: Sync API gen method files
        id: sync_api_gen
        run: |
          set -euo pipefail
          SYNC_REPORT="${{ runner.temp }}/sync_report.md"
          SOURCE_API_GEN="source-repo/${{ steps.params.outputs.api_gen_path }}"
          DEST_API_GEN="pages/api-references/genlayer-node/gen"

          echo "" >> $SYNC_REPORT
          echo "## API Gen Methods Sync" >> $SYNC_REPORT
          echo "" >> $SYNC_REPORT

          if [ -d "$SOURCE_API_GEN" ]; then
            mkdir -p "$DEST_API_GEN"

            # Track existing files before sync
            declare -A EXISTING_FILES
            while IFS= read -r file; do
              [ -n "$file" ] && EXISTING_FILES["$(basename "$file")"]="$file"
            done < <(find "$DEST_API_GEN" -name "*.mdx" -type f)

            # Track what we'll be syncing
            ADDED=0
            UPDATED=0

            # Process all source files
            for file in "$SOURCE_API_GEN"/*.mdx "$SOURCE_API_GEN"/*.md; do
              if [ -f "$file" ]; then
                basename_no_ext=$(basename "$file" | sed 's/\.[^.]*$//')
                dest_filename="${basename_no_ext}.mdx"
                dest_path="$DEST_API_GEN/$dest_filename"

                if [ -f "$dest_path" ]; then
                  # File exists - check if it's different
                  if ! cmp -s "$file" "$dest_path"; then
                    cp "$file" "$dest_path"
                    echo "- Updated: \`$dest_filename\`" >> $SYNC_REPORT
                    UPDATED=$((UPDATED + 1))
                  fi
                  # Remove from tracking to identify deletions later
                  unset EXISTING_FILES["$dest_filename"]
                else
                  # New file
                  cp "$file" "$dest_path"
                  echo "- Added: \`$dest_filename\`" >> $SYNC_REPORT
                  ADDED=$((ADDED + 1))
                fi
              fi
            done

            # Handle _meta.json separately
            if [ -f "$SOURCE_API_GEN/_meta.json" ]; then
              if [ -f "$DEST_API_GEN/_meta.json" ]; then
                if ! cmp -s "$SOURCE_API_GEN/_meta.json" "$DEST_API_GEN/_meta.json"; then
                  cp "$SOURCE_API_GEN/_meta.json" "$DEST_API_GEN/"
                  echo "- Updated: \`_meta.json\`" >> $SYNC_REPORT
                fi
              else
                cp "$SOURCE_API_GEN/_meta.json" "$DEST_API_GEN/"
                echo "- Added: \`_meta.json\`" >> $SYNC_REPORT
              fi
              unset EXISTING_FILES["_meta.json"]
            elif [ -f "$DEST_API_GEN/_meta.json" ]; then
              rm "$DEST_API_GEN/_meta.json"
              echo "- Deleted: \`_meta.json\`" >> $SYNC_REPORT
            fi

            # Remove files that no longer exist in source
            DELETED=${DELETED:-0}
            for dest_file in "${EXISTING_FILES[@]}"; do
              if [ -f "$dest_file" ]; then
                rm "$dest_file"
                echo "- Deleted: \`$(basename "$dest_file")\`" >> $SYNC_REPORT
                DELETED=$((DELETED + 1))
              fi
            done

            # Summary
            TOTAL=$((ADDED + UPDATED + DELETED))
            if [ $TOTAL -eq 0 ]; then
              echo "- No API gen method updates found" >> $SYNC_REPORT
            else
              echo "" >> $SYNC_REPORT
              echo "Summary: $ADDED added, $UPDATED updated, $DELETED deleted" >> $SYNC_REPORT
            fi

            # Output all metrics
            echo "api_gen_added=$ADDED" >> $GITHUB_OUTPUT
            echo "api_gen_updated=$UPDATED" >> $GITHUB_OUTPUT
            echo "api_gen_deleted=$DELETED" >> $GITHUB_OUTPUT
            echo "api_gen_total=$TOTAL" >> $GITHUB_OUTPUT
          else
            echo "- Source API gen directory not found: \`${{ steps.params.outputs.api_gen_path }}\`" >> $SYNC_REPORT
            echo "api_gen_added=0" >> $GITHUB_OUTPUT
            echo "api_gen_updated=0" >> $GITHUB_OUTPUT
            echo "api_gen_deleted=0" >> $GITHUB_OUTPUT
            echo "api_gen_total=0" >> $GITHUB_OUTPUT
          fi

      - name: Sync API debug method files
        id: sync_api_debug
        run: |
          set -euo pipefail
          SYNC_REPORT="${{ runner.temp }}/sync_report.md"
          SOURCE_API_DEBUG="source-repo/${{ steps.params.outputs.api_debug_path }}"
          DEST_API_DEBUG="pages/api-references/genlayer-node/debug"

          echo "" >> $SYNC_REPORT
          echo "## API Debug Methods Sync" >> $SYNC_REPORT
          echo "" >> $SYNC_REPORT

          if [ -d "$SOURCE_API_DEBUG" ]; then
            mkdir -p "$DEST_API_DEBUG"

            # Track existing files before sync
            declare -A EXISTING_FILES
            while IFS= read -r file; do
              [ -n "$file" ] && EXISTING_FILES["$(basename "$file")"]="$file"
            done < <(find "$DEST_API_DEBUG" -name "*.mdx" -type f)

            # Track what we'll be syncing
            ADDED=0
            UPDATED=0

            # Process all source files
            for file in "$SOURCE_API_DEBUG"/*.mdx "$SOURCE_API_DEBUG"/*.md; do
              if [ -f "$file" ]; then
                basename_no_ext=$(basename "$file" | sed 's/\.[^.]*$//')
                dest_filename="${basename_no_ext}.mdx"
                dest_path="$DEST_API_DEBUG/$dest_filename"

                if [ -f "$dest_path" ]; then
                  # File exists - check if it's different
                  if ! cmp -s "$file" "$dest_path"; then
                    cp "$file" "$dest_path"
                    echo "- Updated: \`$dest_filename\`" >> $SYNC_REPORT
                    UPDATED=$((UPDATED + 1))
                  fi
                  # Remove from tracking to identify deletions later
                  unset EXISTING_FILES["$dest_filename"]
                else
                  # New file
                  cp "$file" "$dest_path"
                  echo "- Added: \`$dest_filename\`" >> $SYNC_REPORT
                  ADDED=$((ADDED + 1))
                fi
              fi
            done

            # Handle _meta.json separately
            if [ -f "$SOURCE_API_DEBUG/_meta.json" ]; then
              if [ -f "$DEST_API_DEBUG/_meta.json" ]; then
                if ! cmp -s "$SOURCE_API_DEBUG/_meta.json" "$DEST_API_DEBUG/_meta.json"; then
                  cp "$SOURCE_API_DEBUG/_meta.json" "$DEST_API_DEBUG/"
                  echo "- Updated: \`_meta.json\`" >> $SYNC_REPORT
                fi
              else
                cp "$SOURCE_API_DEBUG/_meta.json" "$DEST_API_DEBUG/"
                echo "- Added: \`_meta.json\`" >> $SYNC_REPORT
              fi
              unset EXISTING_FILES["_meta.json"]
            elif [ -f "$DEST_API_DEBUG/_meta.json" ]; then
              rm "$DEST_API_DEBUG/_meta.json"
              echo "- Deleted: \`_meta.json\`" >> $SYNC_REPORT
            fi

            # Remove files that no longer exist in source
            DELETED=${DELETED:-0}
            for dest_file in "${EXISTING_FILES[@]}"; do
              if [ -f "$dest_file" ]; then
                rm "$dest_file"
                echo "- Deleted: \`$(basename "$dest_file")\`" >> $SYNC_REPORT
                DELETED=$((DELETED + 1))
              fi
            done

            # Summary
            TOTAL=$((ADDED + UPDATED + DELETED))
            if [ $TOTAL -eq 0 ]; then
              echo "- No API debug method updates found" >> $SYNC_REPORT
            else
              echo "" >> $SYNC_REPORT
              echo "Summary: $ADDED added, $UPDATED updated, $DELETED deleted" >> $SYNC_REPORT
            fi

            # Output all metrics
            echo "api_debug_added=$ADDED" >> $GITHUB_OUTPUT
            echo "api_debug_updated=$UPDATED" >> $GITHUB_OUTPUT
            echo "api_debug_deleted=$DELETED" >> $GITHUB_OUTPUT
            echo "api_debug_total=$TOTAL" >> $GITHUB_OUTPUT
          else
            echo "- Source API debug directory not found: \`${{ steps.params.outputs.api_debug_path }}\`" >> $SYNC_REPORT
            echo "api_debug_added=0" >> $GITHUB_OUTPUT
            echo "api_debug_updated=0" >> $GITHUB_OUTPUT
            echo "api_debug_deleted=0" >> $GITHUB_OUTPUT
            echo "api_debug_total=0" >> $GITHUB_OUTPUT
          fi

      - name: Run documentation generation scripts
        run: |
          set -euo pipefail
          SYNC_REPORT="${{ runner.temp }}/sync_report.md"
          echo "" >> $SYNC_REPORT
          echo "## Documentation Generation" >> $SYNC_REPORT
          echo "" >> $SYNC_REPORT

          npm run node-generate-changelog
          echo "- ✅ Generated changelog" >> $SYNC_REPORT

          npm run node-update-setup-guide
          echo "- ✅ Updated setup guide versions" >> $SYNC_REPORT

          npm run node-generate-api-docs
          echo "- ✅ Generated API documentation" >> $SYNC_REPORT

      - name: Check for changes
        id: check_changes
        run: |
          set -euo pipefail
          if [ -n "$(git status --porcelain)" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT

            # Count all changes
            TOTAL_ADDED=$(( ${{ steps.sync_changelog.outputs.changelog_added || 0 }} + \
                          ${{ steps.sync_api_gen.outputs.api_gen_added || 0 }} + \
                          ${{ steps.sync_api_debug.outputs.api_debug_added || 0 }} ))
            TOTAL_UPDATED=$(( ${{ steps.sync_changelog.outputs.changelog_updated || 0 }} + \
                            ${{ steps.sync_api_gen.outputs.api_gen_updated || 0 }} + \
                            ${{ steps.sync_api_debug.outputs.api_debug_updated || 0 }} ))
            TOTAL_DELETED=$(( ${{ steps.sync_changelog.outputs.changelog_deleted || 0 }} + \
                            ${{ steps.sync_api_gen.outputs.api_gen_deleted || 0 }} + \
                            ${{ steps.sync_api_debug.outputs.api_debug_deleted || 0 }} ))
            TOTAL_CHANGES=$(( TOTAL_ADDED + TOTAL_UPDATED + TOTAL_DELETED ))

            echo "total_added=$TOTAL_ADDED" >> $GITHUB_OUTPUT
            echo "total_updated=$TOTAL_UPDATED" >> $GITHUB_OUTPUT
            echo "total_deleted=$TOTAL_DELETED" >> $GITHUB_OUTPUT
            echo "total_changes=$TOTAL_CHANGES" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "total_added=0" >> $GITHUB_OUTPUT
            echo "total_updated=0" >> $GITHUB_OUTPUT
            echo "total_deleted=0" >> $GITHUB_OUTPUT
            echo "total_changes=0" >> $GITHUB_OUTPUT
          fi

      - name: Commit changes
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          set -euo pipefail
          git add content/validators/changelog pages/api-references pages/validators
          git commit -m "docs: Sync documentation from node repository ${{ steps.params.outputs.tag }}

          - Source: genlayerlabs/genlayer-node@${{ steps.params.outputs.source_branch }}
          - Tag: ${{ steps.params.outputs.tag }}
          - Total changes: ${{ steps.check_changes.outputs.total_changes }}
          - Added: ${{ steps.check_changes.outputs.total_added }} files
          - Updated: ${{ steps.check_changes.outputs.total_updated }} files
          - Deleted: ${{ steps.check_changes.outputs.total_deleted }} files"

      - name: Read sync report
        id: read_sync_report
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          set -euo pipefail
          # Read the sync report content and escape for GitHub Actions
          SYNC_REPORT="${{ runner.temp }}/sync_report.md"
          SYNC_REPORT_CONTENT=$(cat $SYNC_REPORT)
          # Use EOF delimiter to handle multi-line content
          echo "content<<EOF" >> $GITHUB_OUTPUT
          echo "$SYNC_REPORT_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Push changes
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          set -euo pipefail
          git push origin ${{ env.BRANCH_NAME }}

      - name: Create Pull Request
        if: steps.check_changes.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v7.0.8
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ env.BRANCH_NAME }}
          title: "docs: Sync documentation from genlayer-node ${{ steps.params.outputs.tag }}"
          body: |
            ## 🔄 Documentation Sync from Node Repository

            This PR automatically syncs documentation from the genlayer-node repository.

            ### 📋 Summary
            - **Source Repository**: `genlayerlabs/genlayer-node`
            - **Source Branch**: `${{ steps.params.outputs.source_branch }}`
            - **Latest Tag**: `${{ steps.params.outputs.tag }}`
            - **Total Files Changed**: ${{ steps.check_changes.outputs.total_changes }}
              - Added: ${{ steps.check_changes.outputs.total_added }} files
              - Updated: ${{ steps.check_changes.outputs.total_updated }} files
              - Deleted: ${{ steps.check_changes.outputs.total_deleted }} files
            - **Timestamp**: ${{ github.run_started_at }}

            ### 📝 Changes

            ${{ steps.check_changes.outputs.has_changes == 'true' && 'See details below:' || 'No changes detected.' }}

            ---

            ${{ steps.read_sync_report.outputs.content }}

            ---

            ### 🤖 Automated Process

            This PR was automatically generated by the documentation sync workflow. The following scripts were run:
            - `npm run node-generate-changelog`
            - `npm run node-update-setup-guide`
            - `npm run node-generate-api-docs`

            Please review the changes and merge if everything looks correct.
          labels: |
            documentation
            automated
          draft: false

      - name: Summary
        run: |
          set -euo pipefail
          if [ "${{ steps.check_changes.outputs.has_changes }}" == "true" ]; then
            echo "✅ Successfully created PR with documentation updates" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.read_sync_report.outputs.content }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ No documentation changes detected. No PR created." >> $GITHUB_STEP_SUMMARY
          fi
